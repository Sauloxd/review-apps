{"version":3,"sources":["assets/fox-multishine.gif","assets/fox-waveshine.gif","assets/fox-combo-1.gif","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","activeStyle","fontWeight","color","style","marginRight","to","App","basename","process","console","log","display","alignItems","flexDirection","marginTop","marginBottom","path","alt","src","waveshine","multishine","combo1","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oJAAAA,EAAOC,QAAU,IAA0B,4C,mBCA3CD,EAAOC,QAAU,IAA0B,2C,mBCA3CD,EAAOC,QAAU,IAA0B,yC,8MCyD3C,SAASC,IACP,IAAMC,EAAc,CAClBC,WAAY,OACZC,MAAO,SAEHC,EAAM,CAAEC,YAAa,IAC3B,OACE,6BACE,kBAAC,IAAD,CACEC,GAAG,cACHL,YAAaA,EACbG,MAAOA,GAHT,cAOA,kBAAC,IAAD,CACEE,GAAG,eACHL,YAAaA,EACbG,MAAOA,GAHT,eAOA,kBAAC,IAAD,CACEE,GAAG,UACHL,YAAaA,GAFf,WAUSM,MA7Ef,WACE,IAAMC,EAAWC,4CAEjB,OADAC,QAAQC,IAAIH,GAEV,oCACE,kBAAC,IAAD,CAAQA,SAAUA,GAChB,yBAAKJ,MAAO,CAAEQ,QAAS,OAAQC,WAAY,SAAUC,cAAe,WAClE,yBAAKV,MAAO,CAAEW,UAAW,GAAIC,aAAc,KACzC,kBAAChB,EAAD,OAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiB,KAAM,CAAC,gBACZ,yBAAKC,IAAI,YAAYC,IAAKC,OAE5B,kBAAC,IAAD,CAAOH,KAAK,gBACV,yBAAKC,IAAI,aAAaC,IAAKE,OAE7B,kBAAC,IAAD,CAAOJ,KAAK,WACV,yBAAKC,IAAI,SAASC,IAAKG,UAK/B,kBAAC,IAAD,KACE,yBAAKlB,MAAO,CAAEQ,QAAS,OAAQC,WAAY,SAAUC,cAAe,WAClE,yBAAKV,MAAO,CAAEW,UAAW,GAAIC,aAAc,KACzC,kBAAChB,EAAD,OAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiB,KAAM,CAAC,gBACZ,yBAAKC,IAAI,YAAYC,IAAKC,OAE5B,kBAAC,IAAD,CAAOH,KAAK,gBACV,yBAAKC,IAAI,aAAaC,IAAKE,OAE7B,kBAAC,IAAD,CAAOJ,KAAK,WACV,yBAAKC,IAAI,SAASC,IAAKG,YCpCjBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.062aaeb5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fox-multishine.90b071d4.gif\";","module.exports = __webpack_public_path__ + \"static/media/fox-waveshine.7ec8b809.gif\";","module.exports = __webpack_public_path__ + \"static/media/fox-combo-1.b8000ebc.gif\";","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  HashRouter,\n  Switch,\n  Route,\n  NavLink\n} from 'react-router-dom';\nimport multishine from './assets/fox-multishine.gif';\nimport waveshine from './assets/fox-waveshine.gif';\nimport combo1 from './assets/fox-combo-1.gif';\n\nfunction App() {\n  const basename = process.env.PUBLIC_URL;\n  console.log(basename)\n  return (\n    <>\n      <Router basename={basename}>\n        <div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\n          <div style={{ marginTop: 24, marginBottom: 24 }}>\n            <Navbar />\n          </div>\n          <Switch>\n            <Route path={['/wave-shine']}>\n              <img alt=\"waveshine\" src={waveshine}/>\n            </Route>\n            <Route path=\"/multi-shine\">\n              <img alt=\"multishine\" src={multishine}/>\n            </Route>\n            <Route path=\"/combos\">\n              <img alt=\"combo1\" src={combo1}/>\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n      <HashRouter>\n        <div style={{ display: 'flex', alignItems: 'center', flexDirection: 'column' }}>\n          <div style={{ marginTop: 24, marginBottom: 24 }}>\n            <Navbar />\n          </div>\n          <Switch>\n            <Route path={['/wave-shine']}>\n              <img alt=\"waveshine\" src={waveshine}/>\n            </Route>\n            <Route path=\"/multi-shine\">\n              <img alt=\"multishine\" src={multishine}/>\n            </Route>\n            <Route path=\"/combos\">\n              <img alt=\"combo1\" src={combo1}/>\n            </Route>\n          </Switch>\n        </div>\n      </HashRouter>\n    </>\n  );\n}\n\nfunction Navbar () {\n  const activeStyle = {\n    fontWeight: 'bold',\n    color: 'green'\n  };\n  const style={ marginRight: 24 };\n  return (\n    <div>\n      <NavLink\n        to=\"/wave-shine\"\n        activeStyle={activeStyle}\n        style={style}\n      >\n        Wave Shine\n      </NavLink>\n      <NavLink\n        to=\"/multi-shine\"\n        activeStyle={activeStyle}\n        style={style}\n      >\n        Multi-shine\n      </NavLink>\n      <NavLink\n        to=\"/combos\"\n        activeStyle={activeStyle}\n      >\n        Combos\n      </NavLink>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}